# Interactive Bash Shell for Development & Debugging
#
# PURPOSE: Development and debugging tool for ROS 2 DDS discovery and GUI testing.
#          This is NOT a production service - use specific compose files
#          (rviz.yaml, rqt.yaml) for production workloads.
#
# Quick Start (from repo root):
#   docker compose -f compose/viz/bash.yaml run --rm bash
#
# Once inside, you must start the ROS 2 daemon manually:
#   ros2 daemon start
#
# Then you can:
#   - Test DDS discovery: ros2 topic list, ros2 node list
#   - Launch GUI tools: rviz2, rqt
#   - Debug network issues: ss -ulpn | grep 74, tcpdump
#   - Check DDS config: bash /dds_config/diagnose_dds.sh
#
# Requirements:
#   - Native Docker in WSL2 (NOT Docker Desktop)
#   - WSL2 mirrored networking enabled (.wslconfig)
#   - ZeroTier VPN connected on Windows
#   - Windows Firewall rule for UDP ports 7400-7500
#   - See: docs/native-docker-wsl2-setup.md

services:
  bash:
    image: ghcr.io/pondersome/grunt_base:${ROS_DISTRO:-humble}-dev
    container_name: grunt_bash_${ROS_DISTRO:-humble}
    stdin_open: true
    tty: true

    # Run as dev user (UID 1000, matches WSL2 user)
    user: dev

    environment:
      # ROS 2 configuration
      - RMW_IMPLEMENTATION=rmw_fastrtps_cpp
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}

      # FastRTPS profile for DDS communication (required for topic discovery)
      # Using unicast profile with explicit peers for cross-VPN discovery
      - FASTRTPS_DEFAULT_PROFILES_FILE=/dds_config/fastrtps_unicast.xml

      # WSLg display (works with both X11 and Wayland)
      - DISPLAY=${DISPLAY}
      - WAYLAND_DISPLAY=${WAYLAND_DISPLAY}
      - XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR}

      # PulseAudio for audio feedback
      - PULSE_SERVER=${PULSE_SERVER:-/mnt/wslg/PulseServer}

    volumes:
      # WSLg sockets
      - /mnt/wslg:/mnt/wslg:rw
      - /tmp/.X11-unix:/tmp/.X11-unix:ro

      # DDS configuration for cross-VPN discovery
      - ../../config/dds:/dds_config:ro

      # Development workspace (bind-mounted from WSL2)
      - ~/ros2/${ROS_DISTRO:-humble}/dev_ws:/home/dev/dev_ws:rw

      # Simulation workspace (bind-mounted from WSL2)
      - ~/ros2/${ROS_DISTRO:-humble}/sim_ws:/home/dev/sim_ws:rw

      # RViz config for dev user
      - ../../config/rviz/default.rviz:/home/dev/.rviz2/default.rviz:ro

    # Host networking for ROS 2 DDS discovery
    network_mode: host

    # Interactive bash shell
    command: ["/bin/bash"]
